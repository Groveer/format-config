---
# 语言: None, Cpp, CSharp, Java, JavaScript, Json, ObjC, Proto, TableGen, TextProto, Verilog
Language: Cpp
# BasedOnStyle: LLVM, Google, Chromium, Mozilla, WebKit, Microsoft, GNU, InheritParentConfig(使用父目录配置)
# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4

# 开括号(开圆括号、开尖括号、开方括号)后的对齐:
# Align, DontAlign, AlwaysBreak(总是在开括号后换行),
# BlockIndent(同AlwaysBreak，但关括号也换行, 仅适用于圆括号)
AlignAfterOpenBracket: Align

# 结构体数组列对齐方式：None, Left, Right
AlignArrayOfStructures: None

# 连续赋值时，对齐所有等号:
# None, Consecutive(连续时对齐), AcrossEmptyLines(跨空行对齐),
# AcrossComments(跨注释对齐), AcrossEmptyLinesAndComments(跨空行和注释)
AlignConsecutiveAssignments: None
# 连续位字段对齐方式，参数同上
AlignConsecutiveBitFields: None
# 连续声明时，对齐所有声明的变量名，同上
AlignConsecutiveDeclarations: None
# 连续定义时，对齐所有宏，同上
AlignConsecutiveMacros: None

# 对齐二元和三元操作符，与BreakBeforeBinaryOperators配合使用：
# DontAlign, Align(对齐运算符), AlignAfterOperator(在运算符之后对齐)
AlignOperands: Align

AlignEscapedNewlines: Right

# 左对齐逃脱换行(使用反斜杠换行)的反斜杠
#AlignEscapedNewlinesLeft: true
# 水平对齐二元和三元表达式的操作数
AlignOperands: true
# 对齐连续的尾随的注释, 从16版本开始可以不是bool值：
# Leave(保留尾随注释), Always(对齐尾随注释), Never(不对齐，但其他格式化程序可用)
# AlignTrailingComments: true
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 2

# 如果函数调用或大括号初始化列表不适合一行，允许将所有参数放在下一行，即使 BinPackArguments 为 false。
AllowAllArgumentsOnNextLine: true

# 允许函数声明的所有参数在放在下一行，即使 BinPackParameters 为false。
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的块放在同一行:Never(不允许), Empty(只允许空行), Always(总是允许)
AllowShortBlocksOnASingleLine: Empty
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false
# 允许短的枚举放在同一行
AllowShortEnumsOnASingleLine: false
# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: Inline
# 允许短的if语句保持在同一行：Never, WithoutElse(有else的时候不允许同一行), OnlyFirstIf, AllIfsAndElse
AllowShortIfStatementsOnASingleLine: Never
# 允许短的Lambda表达式保持在同一行：None, Empty, Inline, All
AllowShortLambdasOnASingleLine: Inline
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 总是在定义返回类型后换行(已弃用)：None, All, TopLevel
AlwaysBreakAfterDefinitionReturnType: None
# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
# AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
# 替换AlwaysBreakAfterDefinitionReturnType
AlwaysBreakAfterReturnType: None
# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false
# 总是在template声明后换行: No, MultiLine, Yes
AlwaysBreakTemplateDeclarations: Yes
# 一个字符串向量应该被解释为属性/限定符，这对于语言扩展或静态分析器注释很有用。
AttributeMacros: ['__capability', '__output', '__ununsed']
# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: false
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: false
# 位域字段间距(冒号)：Both, None, Before, After
BitFieldColonSpacing: Both
# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
BraceWrapping:
  # class定义后面
  AfterClass: true
  # 控制语句后面: Never, MultiLine, Always
  AfterControlStatement: Never
  # enum定义后面
  AfterEnum: false
  # 函数定义后面
  AfterFunction: true
  # 命名空间定义后面
  AfterNamespace: false
  # ObjC定义后面
  AfterObjCDeclaration: false
  # struct定义后面
  AfterStruct: true
  # union定义后面
  AfterUnion: true
  # extern语句后面
  AfterExternBlock: false
  # catch之前
  BeforeCatch: false
  # else之前
  BeforeElse: false
  # Lambda之前
  BeforeLambdaBody: false
  # while之前
  BeforeWhile: false
  # 缩进大括号
  IndentBraces: false
  # 如果为false, 空函数花括号会放在一行
  SplitEmptyFunction: false
  # class struct enum
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# 是否在c++11 的属性之后换行：Always, Leave(属性后的断行保持不变), Never
BreakAfterAttributes: Always
# 与AlignOperands配合使用：
# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Custom
# 在概念声明前换行：Never, Allowed, Always
BreakBeforeConceptDeclarations: Allowed
# 在内联ASM冒号前换行：Never, OnlyMultiline, Always
BreakBeforeInlineASMColon: OnlyMultiline
# 在三元运算符前换行
BreakBeforeTernaryOperators: false

# 在构造函数的初始化列表中换行
# 该函数在5版本已被废弃
# BreakConstructorInitializersBeforeComma: true
# BeforeColon(冒号之前换行，逗号之后换行), BeforeComma(逗号和冒号之前换行), AfterColon(逗号和冒号之后换行)
BreakConstructorInitializers: BeforeComma
# 在类继承列表中换行：BeforeColon(冒号前，逗号后), BeforeComma(冒号逗号前), AfterColon(冒号逗号后), AfterComma(冒号不换行，逗号后换行)
BreakInheritanceList: BeforeComma
# 格式化时允许中断字符串文字。
BreakStringLiterals: true
# 每行字符的限制，0表示没有限制
ColumnLimit: 80
# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas: '^ IWYU pragma:'
# 为true时，连续的命名空间声明将在同一行
CompactNamespaces: false
# 构造函数的初始化列表要么都在同一行，要么都各自一行
# 该函数在14版本已废弃，查看PackConstructorInitializers中的CurrentLine
# ConstructorInitializerAllOnOneLineOrOnePerLine: false
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4
# 延续的行的缩进宽度
ContinuationIndentWidth: 4
# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true
# 分析最常用行结尾（\r\n 或 \n）的格式化文件。
# 该函数在17版本已废弃，See DeriveLF and DeriveCRLF of LineEnding
# DeriveLineEnding: true
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false
# 关闭格式化
DisableFormat: false
# 定义何时在访问修饰符之后放置一个空行：Never, Leave, Always
# EmptyLineBeforeAccessModifier 配置处理两个访问修饰符之间的空行数。
EmptyLineAfterAccessModifier: Never
# 定义何时在访问修饰符之前放置一个空行：Never, Leave, LogicalBlock, Always
EmptyLineBeforeAccessModifier:
# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false
# 为命名空间添加缺失的命名空间结束注释并修复无效的现有注释
FixNamespaceComments: true
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ]
# 应解释为条件而不是函数调用的宏向量。
IfMacros: ['IF']
# 多个#include 块可以作为一个排序并根据类别进行划分：Preserve(对每个块排序), Merge(合并多个块), Regroup(合并多个块，并重新分组)
IncludeBlocks: Regroup
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
#   可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    2
    CaseSensitive:   true
  - Regex:           '^((<|")(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0

# 缩进访问修饰符
IndentAccessModifiers: false
# 缩进case块
IndentCaseBlocks: false
# 缩进case标签
IndentCaseLabels: true
# 缩进extern块：AfterExternBlock, NoIndent, Indent
IndentExternBlock: Indent
# 缩进goto标签
IndentGotoLabels: false
# 缩进预编译指令：None, AfterHash, BeforeHash
IndentPPDirectives:  AfterHash
# 缩进模板中的 requires 语句。这仅在 RequiresClausePosition 为 OwnLine 或 WithFollowing 时适用。
# 在 clang-format 12、13 和 14 中，它被命名为 IndentRequires。
IndentRequiresClause: false
# 缩进宽度
IndentWidth: 4
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
# 在 C++ 中的控制语句（if、else、for、do 和 while）之后插入大括号，除非控制语句在宏定义内或者大括号将包含预处理器指令。
# 由于 clang-format 缺少完整的语义信息，将此选项设置为 true 可能会导致代码格式不正确。
InsertBraces: false
# 在文件末尾插入一个换行符。
InsertNewlineAtEOF: true
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# Lambda 表达式缩进：Signature, OuterScope
LambdaBodyIndentation: Signature
# 行结束符：LF, CRLF, DeriveLF, DeriveCRLF
LineEnding: DeriveCRLF
# 开始一个块的宏的正则表达式
MacroBlockBegin: ''
# 结束一个块的宏的正则表达式
MacroBlockEnd: ''
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: Inner
# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4
# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true

# 用于缩进预处理器语句的列数。当设置为 -1（默认值）时，IndentWidth 也用于预处理器语句。
PPIndentWidth: 2

# 包构造初始化列表：Never, BinPack, CurrentLine, NextLine
PackConstructorInitializers: CurrentLine

# 在=后对函数调用换行的penalty
PenaltyBreakAssignment: 30
# 在call(后对函数调用换行的penalty
PenaltyBreakBeforeFirstCallParameter: 19
# 在一个注释中引入换行的penalty
PenaltyBreakComment: 300
# 在(后换行的penalty
PenaltyBreakOpenParenthesis: 300
# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120
# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000
# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000
# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 60

# 指针的对齐: Left, Right, Middle
PointerAlignment: Right
# 排列说明符和限定符: Leave, Left, Right, Custom
# 使用Custom时继承自QualifierOrder
QualifierAlignment: Left
# 限定符出现的顺序。Order 是一个数组，可以包含以下任何一项：
# const inline static friend constexpr volatile restrict type
# 必须包含 type, 类型放在type左右
QualifierOrder: ['inline', 'static', 'type', 'const', 'volatile' ]
# 引用的对齐，同指针对齐：Pointer, Left, Right, Middle
ReferenceAlignment: Pointer
# 允许重新排版注释
ReflowComments: true
# 使用空行来分隔定义块，包括类、结构、枚举和函数: Leave, Always, Never
SeparateDefinitionBlocks: Always
# 允许排序#include: Never, CaseSensitive, CaseInsensitive
SortIncludes: CaseSensitive
# 排序using声明：Never, Lexicographic, LexicographicNumeric
SortUsingDeclarations: LexicographicNumeric

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: true
# 在逻辑非后添加空格
SpaceAfterLogicalNot: false
# 在模板关键字后加空格
SpaceAfterTemplateKeyword: false
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# 在冒号前加空格
SpaceBeforeCaseColon: true
# 在c++11风格的花括号初始化列表前加空格
SpaceBeforeCpp11BracedList: true
# 在构造函数冒号之前加空格
SpaceBeforeCtorInitializerColon: true
# 在继承冒号前加空格
SpaceBeforeInheritanceColon: true
# 开圆括号之前添加一个空格: Never, ControlStatements, ControlStatementsExceptControlMacros, NonEmptyParentheses, Always, Custom
SpaceBeforeParens: ControlStatements
# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 2
# 在尖括号的<后和>前添加空格
SpacesInAngles: false
# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: false
# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false
# 在圆括号的(后和)前添加空格
SpacesInParentheses: false
# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# 标准: Cpp03, Cpp11, Auto
Standard: Auto
# tab宽度
TabWidth: 4
# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never
